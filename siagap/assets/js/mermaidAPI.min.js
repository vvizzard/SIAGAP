import * as d3 from"d3";import scope from"scope-css";import pkg from"../package.json";import{logger,setLogLevel}from"./logger";import utils from"./utils";import flowRenderer from"./diagrams/flowchart/flowRenderer";import flowParser from"./diagrams/flowchart/parser/flow";import flowDb from"./diagrams/flowchart/flowDb";import sequenceRenderer from"./diagrams/sequence/sequenceRenderer";import sequenceParser from"./diagrams/sequence/parser/sequenceDiagram";import sequenceDb from"./diagrams/sequence/sequenceDb";import ganttRenderer from"./diagrams/gantt/ganttRenderer";import ganttParser from"./diagrams/gantt/parser/gantt";import ganttDb from"./diagrams/gantt/ganttDb";import classRenderer from"./diagrams/class/classRenderer";import classParser from"./diagrams/class/parser/classDiagram";import classDb from"./diagrams/class/classDb";import gitGraphRenderer from"./diagrams/git/gitGraphRenderer";import gitGraphParser from"./diagrams/git/parser/gitGraph";import gitGraphAst from"./diagrams/git/gitGraphAst";import infoRenderer from"./diagrams/info/infoRenderer";import infoParser from"./diagrams/info/parser/info";import infoDb from"./diagrams/info/infoDb";const themes={};for(const e of["default","forest","dark","neutral"])themes[e]=require(`./themes/${e}/index.scss`);const config={theme:"default",themeCSS:void 0,logLevel:5,startOnLoad:!0,arrowMarkerAbsolute:!1,flowchart:{htmlLabels:!0,curve:"linear"},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:50,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0,bottomMarginAdj:1,useMaxWidth:!0,rightAngles:!1},gantt:{titleTopMargin:25,barHeight:20,barGap:4,topPadding:50,leftPadding:75,gridLineStartPadding:35,fontSize:11,fontFamily:'"Open-Sans", "sans-serif"',numberSectionStyles:4,axisFormat:"%Y-%m-%d"},class:{},git:{}};function parse(e){const r=utils.detectType(e);let t;switch(logger.debug("Type "+r),r){case"git":(t=gitGraphParser).parser.yy=gitGraphAst;break;case"flowchart":(t=flowParser).parser.yy=flowDb;break;case"sequence":(t=sequenceParser).parser.yy=sequenceDb;break;case"gantt":(t=ganttParser).parser.yy=ganttDb;break;case"class":(t=classParser).parser.yy=classDb;break;case"info":logger.debug("info info info"),(t=infoParser).parser.yy=infoDb}t.parser.yy.parseError=((e,r)=>{throw{str:e,hash:r}}),t.parse(e)}setLogLevel(config.logLevel);export const encodeEntities=function(e){let r=e;return r=(r=(r=r.replace(/style.*:\S*#.*;/g,function(e){return e.substring(0,e.length-1)})).replace(/classDef.*:\S*#.*;/g,function(e){return e.substring(0,e.length-1)})).replace(/#\w+;/g,function(e){const r=e.substring(1,e.length-1);return/^\+?\d+$/.test(r)?"ﬂ°°"+r+"¶ß":"ﬂ°"+r+"¶ß"})};export const decodeEntities=function(e){let r=e;return r=(r=(r=r.replace(/ﬂ°°/g,function(){return"&#"})).replace(/ﬂ°/g,function(){return"&"})).replace(/¶ß/g,function(){return";"})};const render=function(e,r,t,n){if(void 0!==n)n.innerHTML="",d3.select(n).append("div").attr("id","d"+e).append("svg").attr("id",e).attr("width","100%").attr("xmlns","http://www.w3.org/2000/svg").append("g");else{const r=document.querySelector("#d"+e);r&&(r.innerHTML=""),d3.select("body").append("div").attr("id","d"+e).append("svg").attr("id",e).attr("width","100%").attr("xmlns","http://www.w3.org/2000/svg").append("g")}window.txt=r,r=encodeEntities(r);const o=d3.select("#d"+e).node(),a=utils.detectType(r),s=o.firstChild,i=s.firstChild;let c=themes[config.theme];if(void 0===c&&(c=""),void 0!==config.themeCSS&&(c+=`\n${config.themeCSS}`),"flowchart"===a){const e=flowRenderer.getClasses(r);for(const r in e)c+=`\n.${r} > * { ${e[r].styles.join(" !important; ")} !important; }`}const g=document.createElement("style");g.innerHTML=scope(c,`#${e}`),s.insertBefore(g,i);const l=document.createElement("style"),f=window.getComputedStyle(s);switch(l.innerHTML=`#${e} {\n    color: ${f.color};\n    font: ${f.font};\n  }`,s.insertBefore(l,i),a){case"git":config.flowchart.arrowMarkerAbsolute=config.arrowMarkerAbsolute,gitGraphRenderer.setConf(config.git),gitGraphRenderer.draw(r,e,!1);break;case"flowchart":config.flowchart.arrowMarkerAbsolute=config.arrowMarkerAbsolute,flowRenderer.setConf(config.flowchart),flowRenderer.draw(r,e,!1);break;case"sequence":config.sequence.arrowMarkerAbsolute=config.arrowMarkerAbsolute,config.sequenceDiagram?(sequenceRenderer.setConf(Object.assign(config.sequence,config.sequenceDiagram)),console.error("`mermaid config.sequenceDiagram` has been renamed to `config.sequence`. Please update your mermaid config.")):sequenceRenderer.setConf(config.sequence),sequenceRenderer.draw(r,e);break;case"gantt":config.gantt.arrowMarkerAbsolute=config.arrowMarkerAbsolute,ganttRenderer.setConf(config.gantt),ganttRenderer.draw(r,e);break;case"class":config.class.arrowMarkerAbsolute=config.arrowMarkerAbsolute,classRenderer.setConf(config.class),classRenderer.draw(r,e);break;case"info":config.class.arrowMarkerAbsolute=config.arrowMarkerAbsolute,infoRenderer.setConf(config.class),infoRenderer.draw(r,e,pkg.version)}d3.select(`[id="${e}"]`).selectAll("foreignobject > *").attr("xmlns","http://www.w3.org/1999/xhtml");let d="";config.arrowMarkerAbsolute&&(d=(d=(d=window.location.protocol+"//"+window.location.host+window.location.pathname+window.location.search).replace(/\(/g,"\\(")).replace(/\)/g,"\\)"));let m=d3.select("#d"+e).node().innerHTML.replace(/url\(#arrowhead/g,"url("+d+"#arrowhead","g");m=decodeEntities(m),void 0!==t?(t(m,flowDb.bindFunctions),t(m,ganttDb.bindFunctions)):logger.warn("CB = undefined!");const p=d3.select("#d"+e).node();return null!==p&&"function"==typeof p.remove&&d3.select("#d"+e).node().remove(),m},setConf=function(e){const r=Object.keys(e);for(let t=0;t<r.length;t++)if("object"==typeof e[r[t]]&&null!=e[r[t]]){const n=Object.keys(e[r[t]]);for(let o=0;o<n.length;o++)logger.debug("Setting conf ",r[t],"-",n[o]),void 0===config[r[t]]&&(config[r[t]]={}),logger.debug("Setting config: "+r[t]+" "+n[o]+" to "+e[r[t]][n[o]]),config[r[t]][n[o]]=e[r[t]][n[o]]}else config[r[t]]=e[r[t]]};function initialize(e){logger.debug("Initializing mermaidAPI ",pkg.version),"object"==typeof e&&setConf(e),setLogLevel(config.logLevel)}function getConfig(){return config}const mermaidAPI={render:render,parse:parse,initialize:initialize,getConfig:getConfig};export default mermaidAPI;